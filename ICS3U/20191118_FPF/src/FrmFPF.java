/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hu765630
 * Name: Sylvia Hurst
 * Teacher's Name: Mr. Yeung
 * Course: ICS
 * Start Date: November 18, 2019
 * End Date: November 21, 2019
 * Description: A form that calls methods to determine the factorial of a number, whether or not a number is prime, and the Fibonacci number at a given index.
 * 
 */
public class FrmFPF extends javax.swing.JFrame {

    /**
     * Creates new form FrmFPF
     */
    public FrmFPF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblFactDesc = new javax.swing.JLabel();
        lblFactOut = new javax.swing.JLabel();
        lblPrimeDesc = new javax.swing.JLabel();
        lblPrimeOut = new javax.swing.JLabel();
        lblFibDesc = new javax.swing.JLabel();
        lblFibOut = new javax.swing.JLabel();
        txtFact = new javax.swing.JTextField();
        txtPrime = new javax.swing.JTextField();
        txtFib = new javax.swing.JTextField();
        btnFact = new javax.swing.JButton();
        btnPrime = new javax.swing.JButton();
        btnFib = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("~ NUMBERS ~");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(190, 10, 180, 40);

        lblFactDesc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblFactDesc.setText("Determine your number's factorial:");
        getContentPane().add(lblFactDesc);
        lblFactDesc.setBounds(20, 80, 500, 30);

        lblFactOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblFactOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFactOut.setText("...");
        getContentPane().add(lblFactOut);
        lblFactOut.setBounds(410, 110, 130, 30);

        lblPrimeDesc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblPrimeDesc.setText("Determine whether or not your number is prime:");
        getContentPane().add(lblPrimeDesc);
        lblPrimeDesc.setBounds(20, 190, 500, 30);

        lblPrimeOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblPrimeOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrimeOut.setText("...");
        getContentPane().add(lblPrimeOut);
        lblPrimeOut.setBounds(410, 220, 130, 30);

        lblFibDesc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblFibDesc.setText("Determine your number's corresponding Fibonacci number:");
        getContentPane().add(lblFibDesc);
        lblFibDesc.setBounds(20, 290, 510, 30);

        lblFibOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblFibOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFibOut.setText("...");
        getContentPane().add(lblFibOut);
        lblFibOut.setBounds(410, 320, 130, 30);

        txtFact.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtFact.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txtFact);
        txtFact.setBounds(70, 130, 100, 40);

        txtPrime.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtPrime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txtPrime);
        txtPrime.setBounds(70, 240, 100, 40);

        txtFib.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtFib.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(txtFib);
        txtFib.setBounds(70, 340, 100, 40);

        btnFact.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btnFact.setText("CLICK");
        btnFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFactActionPerformed(evt);
            }
        });
        getContentPane().add(btnFact);
        btnFact.setBounds(230, 130, 110, 40);

        btnPrime.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btnPrime.setText("CLICK");
        btnPrime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrime);
        btnPrime.setBounds(230, 240, 110, 40);

        btnFib.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btnFib.setText("CLICK");
        btnFib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFibActionPerformed(evt);
            }
        });
        getContentPane().add(btnFib);
        btnFib.setBounds(230, 340, 110, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFactActionPerformed
        
        //FACTORIAL
        
        //This line calls the method to calculate the factorial of the given number
        int factOut = Factorial(Integer.parseInt(txtFact.getText()));
        //This line outputs the result onto the display label
        lblFactOut.setText(String.valueOf(factOut));
        
    }//GEN-LAST:event_btnFactActionPerformed

    private void btnPrimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeActionPerformed
        
        //PRIME
        
        //This line calls the method to calculate whether or not the given number is prime
        boolean primeOut = PrimeNumber(Integer.parseInt(txtPrime.getText()));
        //This line outputs the result onto the display label, as a "Yes" or "No"
        if (primeOut==true)
            lblPrimeOut.setText("Yes");
        else
            lblPrimeOut.setText("No");
        
    }//GEN-LAST:event_btnPrimeActionPerformed

    private void btnFibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFibActionPerformed
        
        //FIBONACCI
        
        //This line calls the method to calculate the Fibonacci number at the given index
        int fibOut = Fibonacci(Integer.parseInt(txtFib.getText()));
        //This line outputs the result onto the display label
        lblFibOut.setText(String.valueOf(fibOut));
        
    }//GEN-LAST:event_btnFibActionPerformed

    //Method for calculating a factorial
    public static int Factorial(int factorial) {
        
        //Setting the highest number that the original number is multiplied by
        int factLimit = factorial-1;
        
        //Multiplying the number by each consecutive lower whole number until it reaches 1
        for (int i = factLimit; i >= 1; i--)
            factorial = factorial*i;
        
        //Returns the result
        return (factorial);
    }
    
    //Method for calculating whether or not a number is prime
    public static boolean PrimeNumber(int primeNum) {
        
        //Defaulting the validity to true
        boolean primeVal = true;
        
        //This loop tests the number being divided by each whole number from 2 up to half its value
        //If at any point the modulus is 0, that means the number is visible by more than just itself and 1,
        //meaning it is not prime, and the validity will be changed to false
        for (int i = 2; i <= primeNum / 2; i++)
        {
            if (primeNum%i==0)
                primeVal = false;
        }
        
        //Returns the result
        return (primeVal);
    }
    
    //Method for calculating the Fibonacci number at a given index
    public static int Fibonacci(int index) {
        
        //Defaulting the target value and previous two values for the third index
        int fibValue = 1;
        int fibPrev1 = 1;
        int fibPrev2 = 0;
        
        if (index==1) //If the index is 1, the value is 0
            fibValue = 0;
        else //If the index is 2, the for loop will not run and the value will just be 1
        {
            for (int i = 2; i < index; i++) //If the index is greater than 2, the for loop will run to determine the value
            {
                //This code runs for as many times as the index value - 2, because the first value produced by this loop is the third index of the Fibonacci sequence.
                //The target value is the sum of the two previous values (starting at 1 and 0 to get the third index, 1).
                //Then the second previous value is equal to the first previous value of the last target,
                //and the first previous value is equal to the last target, to prepare for the next target.
                //This essentially shifts the values forward each by one index. Then the next target value can be calculated.
                fibValue = fibPrev1+fibPrev2; 
                fibPrev2 = fibPrev1;
                fibPrev1 = fibValue;
            }
        }
        
        //Returns the result
        return (fibValue);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFPF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFPF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFPF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFPF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFPF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFact;
    private javax.swing.JButton btnFib;
    private javax.swing.JButton btnPrime;
    private javax.swing.JLabel lblFactDesc;
    private javax.swing.JLabel lblFactOut;
    private javax.swing.JLabel lblFibDesc;
    private javax.swing.JLabel lblFibOut;
    private javax.swing.JLabel lblPrimeDesc;
    private javax.swing.JLabel lblPrimeOut;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFact;
    private javax.swing.JTextField txtFib;
    private javax.swing.JTextField txtPrime;
    // End of variables declaration//GEN-END:variables
}
