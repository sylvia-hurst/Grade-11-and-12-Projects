/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hu765630
 * Name: Sylvia Hurst
 * Teacher's Name: Mr. Yeung
 * Course: ICS
 * Start Date: November 25, 2019
 * End Date: November 25, 2019
 * Description: An encryption and decryption software. It will reverse the message and perform a Caesar Cipher.
 */
public class FrmCryptography extends javax.swing.JFrame {

    /**
     * Creates new form FrmCryptography
     */
    public FrmCryptography() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblEncDesc = new javax.swing.JLabel();
        lblDecDesc = new javax.swing.JLabel();
        txtEncIn = new javax.swing.JTextField();
        txtEncOut = new javax.swing.JTextField();
        txtDecIn = new javax.swing.JTextField();
        txtDecOut = new javax.swing.JTextField();
        btnEnc = new javax.swing.JButton();
        btnDec = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("--- TOP SECRET ENCRYPTION SOFTWARE ---");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(40, 20, 570, 50);

        lblEncDesc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblEncDesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEncDesc.setText("Enter a decrypted message and it will be encrypted.");
        getContentPane().add(lblEncDesc);
        lblEncDesc.setBounds(70, 90, 510, 30);

        lblDecDesc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        lblDecDesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDecDesc.setText("Enter an encrypted message and it will be decrypted.");
        getContentPane().add(lblDecDesc);
        lblDecDesc.setBounds(70, 270, 510, 30);

        txtEncIn.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        getContentPane().add(txtEncIn);
        txtEncIn.setBounds(70, 130, 510, 30);

        txtEncOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtEncOut.setText("Encrypted message will be displayed here...");
        getContentPane().add(txtEncOut);
        txtEncOut.setBounds(70, 220, 510, 30);

        txtDecIn.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtDecIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDecInActionPerformed(evt);
            }
        });
        getContentPane().add(txtDecIn);
        txtDecIn.setBounds(70, 320, 510, 30);

        txtDecOut.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtDecOut.setText("Decrypted message will be displayed here...");
        getContentPane().add(txtDecOut);
        txtDecOut.setBounds(70, 410, 510, 30);

        btnEnc.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btnEnc.setText("ENCRYPT");
        btnEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncActionPerformed(evt);
            }
        });
        getContentPane().add(btnEnc);
        btnEnc.setBounds(230, 170, 170, 40);

        btnDec.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        btnDec.setText("DECRYPT");
        btnDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecActionPerformed(evt);
            }
        });
        getContentPane().add(btnDec);
        btnDec.setBounds(230, 360, 170, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtDecInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDecInActionPerformed
        //Unused
    }//GEN-LAST:event_txtDecInActionPerformed

    private void btnEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncActionPerformed
        
    //ENCRYPTION
    if ((String.valueOf(txtEncIn.getText()).length())>30) //If the String length is too long, this message will be displayed instead of encrypting the String.
        txtEncOut.setText("Please enter a String that contains less than 30 characters.");
    else
        txtEncOut.setText(Encryption (txtEncIn.getText())); //Otherwise, the text box's String is sent to the method that returns the encrypted message to display on the label.
    
    }//GEN-LAST:event_btnEncActionPerformed

    private void btnDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecActionPerformed
    
    //DECRYPTION
    if ((String.valueOf(txtDecIn.getText()).length())>30) //If the String length is too long, this message will be displayed instead of decrypting the String.
        txtDecOut.setText("Please enter a String that contains less than 30 characters.");
    else
        txtDecOut.setText(Decryption (txtDecIn.getText())); //Otherwise, the text box's String is sent to the method that returns the decrypted message to display on the label.
    
    }//GEN-LAST:event_btnDecActionPerformed

    //METHODS
    
    //1: ENCRYPTION
    public static String Encryption (String origMessage) {
        
        //Caesar Cipher
        
        //Variable declarations
        String encMessage = "";
        char tempChar;
        int tempAscii;
        
        //For loop that takes each index letter, converts it to an ASCII number,
        //shifts the value 3 spaces FORWARD through the alphabet, converts it back into a char,
        //and finally, adds the char to the new encrypted message.
        for (int i=0; i<origMessage.length(); i++) {
            
            tempChar = origMessage.charAt(i);
            tempAscii = (int)tempChar;
            
            if ( (tempAscii>=120 && tempAscii<=122) || (tempAscii>=88 && tempAscii <=90) ) //Takes care of X, x, Y, y, Z, z
                tempAscii = tempAscii - 23;
            else if (tempAscii<65 || (tempAscii>90 && tempAscii<97) || tempAscii>122) {}
                //Does nothing, takes care of non-letter characters
            else
                tempAscii = tempAscii + 3; //Takes care of letters between A and W
            
            tempChar = (char)tempAscii;
            encMessage = encMessage + tempChar;
            
        }
        
        //Reversing the String
        
        String revMessage = "";
        
        //For loop that copies each letter to a new String in reverse
        for (int i = encMessage.length() - 1; i>=0; i--)
            revMessage = revMessage + encMessage.charAt(i);

        return (revMessage);
    }
    
    //2: DECRYPTION
    public static String Decryption (String origMessage) {
        
        //Reversing the String
        
        String revMessage = "";
        
        //For loop that copies each letter to a new String in reverse
        for (int i = origMessage.length() - 1; i>=0; i--)
            revMessage = revMessage + origMessage.charAt(i);
        
        //Caesar Cipher
        
        String decMessage = "";
        char tempChar;
        int tempAscii;
        
        //For loop that takes each index letter, converts it to an ASCII number,
        //shifts the value 3 spaces BACKWARD through the alphabet, converts it back into a char,
        //and finally, adds the char to the new decrypted message.
        for (int i=0; i<revMessage.length(); i++) {
            
            tempChar = revMessage.charAt(i);
            tempAscii = (int)tempChar;
            
            if ( (tempAscii>=65 && tempAscii<=67) || (tempAscii>=97 && tempAscii <=99) ) //Takes care of A, a, B, b, C, c
                tempAscii = tempAscii + 23;
            else if (tempAscii<65 || (tempAscii>90 && tempAscii<97) || tempAscii>122) {}
                //Does nothing, takes care of non-letter characters
            else
                tempAscii = tempAscii - 3; //Takes care of letters between D and Z
            
            tempChar = (char)tempAscii;
            decMessage = decMessage + tempChar;
            
        }
        
        return (decMessage);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCryptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCryptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCryptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCryptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCryptography().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDec;
    private javax.swing.JButton btnEnc;
    private javax.swing.JLabel lblDecDesc;
    private javax.swing.JLabel lblEncDesc;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDecIn;
    private javax.swing.JTextField txtDecOut;
    private javax.swing.JTextField txtEncIn;
    private javax.swing.JTextField txtEncOut;
    // End of variables declaration//GEN-END:variables
}
