/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hu765630
 * Name: Sylvia Hurst
 * Teacher's Name: Mr. Yeung
 * Course: ICS
 * Start Date: December 7, 2019
 * End Date: December 12, 2019
 * Description: Version 2 of BlackJack, incorporating a GUI.
 */
public class FrmBlackJackV2 extends javax.swing.JFrame {

    /**
     * Creates new form FrmBlackJackV2
     */
    public FrmBlackJackV2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblDesc1 = new javax.swing.JLabel();
        lblDHand1 = new javax.swing.JLabel();
        lblDHand2 = new javax.swing.JLabel();
        lblDHand3 = new javax.swing.JLabel();
        lblDHand4 = new javax.swing.JLabel();
        lblDHand5 = new javax.swing.JLabel();
        lblDesc2 = new javax.swing.JLabel();
        lblPHand1 = new javax.swing.JLabel();
        lblPHand2 = new javax.swing.JLabel();
        lblPHand3 = new javax.swing.JLabel();
        lblPHand4 = new javax.swing.JLabel();
        lblPHand5 = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        lblNarr2 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        lblDesc3 = new javax.swing.JLabel();
        lblWager = new javax.swing.JLabel();
        lblPayroll = new javax.swing.JLabel();
        lblNarr1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("BlackJack");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(170, 20, 350, 40);

        lblDesc1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        lblDesc1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDesc1.setText("Dealer's Hand");
        getContentPane().add(lblDesc1);
        lblDesc1.setBounds(240, 90, 210, 40);

        lblDHand1.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDHand1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblDHand1);
        lblDHand1.setBounds(40, 160, 190, 40);

        lblDHand2.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDHand2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblDHand2);
        lblDHand2.setBounds(250, 160, 190, 40);

        lblDHand3.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDHand3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblDHand3);
        lblDHand3.setBounds(480, 160, 200, 40);

        lblDHand4.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDHand4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblDHand4);
        lblDHand4.setBounds(120, 220, 200, 40);

        lblDHand5.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDHand5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblDHand5);
        lblDHand5.setBounds(350, 220, 230, 40);

        lblDesc2.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        lblDesc2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDesc2.setText("Your Hand");
        getContentPane().add(lblDesc2);
        lblDesc2.setBounds(240, 300, 210, 40);

        lblPHand1.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblPHand1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblPHand1);
        lblPHand1.setBounds(40, 370, 180, 40);

        lblPHand2.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblPHand2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblPHand2);
        lblPHand2.setBounds(250, 370, 200, 40);

        lblPHand3.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblPHand3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblPHand3);
        lblPHand3.setBounds(480, 370, 200, 40);

        lblPHand4.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblPHand4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblPHand4);
        lblPHand4.setBounds(120, 430, 200, 40);

        lblPHand5.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblPHand5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblPHand5);
        lblPHand5.setBounds(360, 430, 210, 40);

        btnOK.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        getContentPane().add(btnOK);
        btnOK.setBounds(430, 550, 80, 40);

        lblNarr2.setFont(new java.awt.Font("Cambria Math", 2, 14)); // NOI18N
        lblNarr2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNarr2.setText("Please begin by entering your first wager, and hitting \"OK\"!");
        getContentPane().add(lblNarr2);
        lblNarr2.setBounds(20, 650, 670, 40);

        txtInput.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });
        getContentPane().add(txtInput);
        txtInput.setBounds(290, 550, 120, 40);

        lblDesc3.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        lblDesc3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDesc3.setText("INPUT:");
        getContentPane().add(lblDesc3);
        lblDesc3.setBounds(170, 550, 100, 40);

        lblWager.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        lblWager.setText("Current wager: 0.0");
        getContentPane().add(lblWager);
        lblWager.setBounds(30, 480, 310, 50);

        lblPayroll.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        lblPayroll.setText("Current payroll: 100.0");
        getContentPane().add(lblPayroll);
        lblPayroll.setBounds(390, 480, 290, 50);

        lblNarr1.setFont(new java.awt.Font("Cambria Math", 2, 14)); // NOI18N
        lblNarr1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNarr1.setText("Welcome to BlackJack V2!");
        getContentPane().add(lblNarr1);
        lblNarr1.setBounds(20, 610, 670, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Static variable declarations:
    static String cNames[] = {"Ace of Hearts", "Two of Hearts", "Three of Hearts", "Four of Hearts", "Five of Hearts", "Six of Hearts", "Seven of Hearts", "Eight of Hearts", "Nine of Hearts", "Ten of Hearts", "Jack of Hearts", "Queen of Hearts", "King of Hearts", "Ace of Diamonds", "Two of Diamonds", "Three of Diamonds", "Four of Diamonds", "Five of Diamonds", "Six of Diamonds", "Seven of Diamonds", "Eight of Diamonds", "Nine of Diamonds", "Ten of Diamonds", "Jack of Diamonds", "Queen of Diamonds", "King of Diamonds", "Ace of Spades", "Two of Spades", "Three of Spades", "Four of Spades", "Five of Spades", "Six of Spades", "Seven of Spades", "Eight of Spades", "Nine of Spades", "Ten of Spades", "Jack of Spades", "Queen of Spades", "King of Spades", "Ace of Clubs", "Two of Clubs", "Three of Clubs", "Four of Clubs", "Five of Clubs", "Six of Clubs", "Seven of Clubs", "Eight of Clubs", "Nine of Clubs", "Ten of Clubs", "Jack of Clubs", "Queen of Clubs", "King of Clubs"};
    static int cValues[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10};
    static boolean cDiscard[] = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
    static int rand;
    
    static double payroll = 100;
    static double wager = 0;
    static int []pHandValues = {0,0,0,0,0};
    static String []pHandNames = {"", "", "", "", ""};
    static int []dHandValues = {0,0,0,0,0};
    static String []dHandNames = {"", "", "", "", ""};
    static String userChoice = "";
    static int pSum = 0;
    static int dSum = 0;
    static int pCount = 2;
    static int dCount = 0;
    static int rCount = 2;
    
    //Variables used for logic checks
    static int testInt;
    static boolean valid;
    static boolean gameEnd = false;
    static int cDisCount;
    
    //METHODS
    
    //1: Randomizer
    public static void randomize (){
        if (cDisCount==52)
                return;
        do {
            rand = (int)(Math.random()*52);
        } while (cDiscard[rand] == true);
        cDiscard[rand] = true;
        
        cDisCount = 0;
        for (int i=0; i<52; i++)
        {
            if (cDiscard[i]==true)
                cDisCount++;
        }
        if (cDisCount==52)
        {
            gameEnd = true;
        }
    }

    //2: Calculate the sum of the player's hand
    public static int calculatePSum(int[] pHand, int pSum) {
        boolean pHandAce = false;
        pSum = 0;
            for (int i=0;i<5;i++)
        {
            if(pHand[i]==1)
                pHandAce = true;
            if(pHand[i]>=10)
                pSum+=10;
            else
                pSum+=pHand[i];
        }
        if (pSum<=11 && pHandAce==true)
            pSum+=10;
        return (pSum);
    }
    
    //3: Calculate the sum of the dealer's hand
    public static int calculateDSum(int[] dHand, int dSum) {
        boolean dHandAce = false;
        dSum = 0;
            for (int i=0;i<5;i++)
        {
            if(dHand[i]==1)
                dHandAce = true;
            if(dHand[i]>=10)
                dSum+=10;
            else
                dSum+=dHand[i];
        }
        if (dSum<=11 && dHandAce==true)
            dSum+=10;
        return (dSum);
    }
    
    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed

    }//GEN-LAST:event_txtInputActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        
        /*
        
        --Notes--
        
        Blackjack rules:
        Ace is worth 1-11. Faces are worth 10. The rest are their pip value.
        You play against the dealer. Try to get at close to 21 without going over. (If you get over 22, you lose the hand.)
        Start by placing your bet.
        Each player is dealt 2 cards to start. The dealer has one card face up and one card face down.
        Players choose whether they want to hit (gain a card), stand (stay), or double (doubles bet but only one card is given).
        Hits can be done multiple times before standing.
        The dealer then reveals their next card, and continues to hit until they have reached/passed 17.
        If the player's hand passes the dealer's, they win their bet from the dealer, and vice versa.
        With ties, the player simply keeps their bet.
        If a player gets a Blackjack (2 cards that = 21), they instantly win the round, and gain 1.5x their bet.
        If a player gets over 21 in their hand, they immediately bust and lose the round.
        
        The game can end if:
        - The player enters "Quit" or a variation of the word Quit when asked to input their wager after turn 1
        - The player gets to 0 or negative money
        - The deck runs out of cards
        
        Code:
        Major if and switch statements are used to control actions based on user input from the text box, and the counted turn value represented by rCount.
        Input for turn 1 is: # for wager. Wager is recorded and starting cards are initialized.
        Inputs for even-numbered turns are: Hit / H, Stand / S, or Double down / D. Using user input(s), results for the round are calculated.
        Inputs for odd-numbered turns greater than 1 are: # for wager, or Quit / Q. Wager is recorded and starting cards are initialized, OR the game ends.
        rCount begins at 2 and increases by 1 each time a turn is completed.
        Using rCount%2, the result of 0 or 1 determines whether the turn is even or odd; this determines what should be happening on that turn.
        
        If at any time an end condition is met, the gameEnd boolean will be set to true and no further button presses will run any processing code for the game.
        
        */
        
        if (gameEnd==false)
        {
        
            userChoice = txtInput.getText();

            if (rCount%2==0)
            {
                //TAKES WAGER OR QUIT INPUT

                try
                {
                    testInt = Integer.parseInt(userChoice);
                    //If this passes, this is a number; the wager value.
                    valid = true;
                }
                catch (NumberFormatException e)
                {
                    //This is not a number. It cannot be the wager value.
                    //However if it is not Quit in any form then the program will not exit.
                    valid = false;
                }

                if (valid==true)
                {
                    //Get wager
                    wager = Integer.parseInt(userChoice);

                    //Changes wager if it is beyond the maximum or minimum limits
                    if (wager >= payroll)
                    {
                        wager = payroll-1;
                    }
                    else if (wager < 0)
                    {
                        wager = 1;
                    }
                    
                    //Subtracts wager from payroll and displays wager
                    payroll-=wager;
                    lblPayroll.setText("Current payroll: " + payroll);
                    lblWager.setText("Current wager: " + wager);

                    //CODE FOR RANDOM CARD GENERATION AND DISPLAY BEGINS HERE
                    
                    //Randomizing the first two cards for the player and dealer hands
                    randomize();
                    pHandValues[0] = cValues[rand];
                    pHandNames[0] = cNames[rand];

                    randomize();
                    pHandValues[1] = cValues[rand];
                    pHandNames[1] = cNames[rand];

                    pHandValues[2] = 0;
                    pHandValues[3] = 0;
                    pHandValues[4] = 0;

                    pHandNames[2] = "";
                    pHandNames[3] = "";
                    pHandNames[4] = "";
                    
                    randomize();
                    dHandValues[0] = cValues[rand];
                    dHandNames[0] = cNames[rand];

                    dHandValues[1] = 0;
                    dHandValues[2] = 0;
                    dHandValues[3] = 0;
                    dHandValues[4] = 0;

                    dHandNames[1] = "";
                    dHandNames[2] = "";
                    dHandNames[3] = "";
                    dHandNames[4] = "";
                    
                    //Displaying the player's two cards and the dealer's first card
                    lblPHand1.setText(pHandNames[0]);
                    lblPHand2.setText(pHandNames[1]);
                    lblPHand3.setText(pHandNames[2]);
                    lblPHand4.setText(pHandNames[3]);
                    lblPHand5.setText(pHandNames[4]);
                    
                    lblDHand1.setText(dHandNames[0]);
                    lblDHand2.setText("...");
                    lblDHand3.setText("");
                    lblDHand4.setText("");
                    lblDHand5.setText("");
                    
                    //Determines if the player got a BlackJack
                    //If so, they instantly win the round and receive 1.5x their wager.
                    //rCount++ to skip the hit/stand/DD code and move on to the next wager input
                    pSum = calculatePSum(pHandValues, pSum);
                    if (pSum==21)
                    {
                        lblNarr1.setText("Blackjack! You win and gain 1.5x your wager!");
                        lblNarr2.setText("Please enter your next wager.");
                        payroll = payroll + (wager*1.5);
                        lblPayroll.setText("Current payroll: " + payroll);
                        lblWager.setText("Current wager: 0.0");
                        rCount++;
                    }
                    else
                    {
                        lblNarr1.setText("View the cards carefully!");
                        lblNarr2.setText("Your options are: Hit, Stand, or Double Down.");
                    }

                    rCount++; //Increases turn value for the next time the button is pressed
                }
                else
                {
                    //Check if the turn value is above 2
                    if (rCount>2) {
                        //Check if the value is Quit in any conventional form
                        switch (userChoice) {
                            case "QUIT": case "Quit": case "quit": case "Q": case "q":
                            {
                                //Program ends
                                //Top message is "You have chosen to quit!" Bottom message is "Game end."
                                //Final scores are already there
                                //A special boolean is set to TRUE. This prevents all other code from running.
                                lblNarr1.setText("You have chosen to quit!");
                                lblNarr2.setText("Game end.");
                                gameEnd = true;
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                //TAKES INPUT FOR HIT, STAND, OR DOUBLE DOWN
                userChoice = txtInput.getText();
                valid = false;
                
                switch (userChoice) {
                    case "HIT": case "Hit": case "hit": case "H": case "h":
                    {
                        lblNarr1.setText("You want another card!");
                        lblNarr2.setText("");
                        randomize();
                        pHandValues[pCount] = cValues[rand];
                        pHandNames[pCount] = cNames[rand];
                        
                        if (pCount==2)
                            lblPHand3.setText(pHandNames[pCount]);
                        else if (pCount==3)
                            lblPHand4.setText(pHandNames[pCount]);
                        else
                            lblPHand5.setText(pHandNames[pCount]);
                        
                        pCount++;
                        pSum = calculatePSum(pHandValues, pSum);
                        
                        if (pCount==5 || pSum>21)
                            valid = true;
                        break;
                    }
                    case "STAND": case "Stand": case "stand": case "S": case "s":
                    {
                        //No display because it quickly zooms to the results
                        valid = true;
                        break;
                    }
                    case "DOUBLE DOWN": case "Double Down": case "Double down": case "double down": case "DD": case "dd":
                    {
                        //No display here either
                        randomize();
                        pHandValues[pCount] = cValues[rand];
                        pHandNames[pCount] = cNames[rand];
                        
                        if (pCount==2)
                            lblPHand3.setText(pHandNames[pCount]);
                        else if (pCount==3)
                            lblPHand4.setText(pHandNames[pCount]);
                        else
                            lblPHand5.setText(pHandNames[pCount]);
                        
                        payroll-=wager;
                        wager = wager*2;
                        lblPayroll.setText("Current payroll: " + payroll);
                        lblWager.setText("Current wager: " + wager);
                        valid = true;
                        break;
                    }
                }
                
                //CALCULATES THE RESULT OF THE ROUND
                if (valid==true)
                {
                    pSum = calculatePSum(pHandValues, pSum);
                    
                    if (pSum>21)
                    {
                        //If the player busts, they immediately lose the round
                        lblNarr1.setText("You bust! You lose the round!");
                        lblNarr2.setText("Please enter your next wager.");
                    }
                    else
                    {
                        
                        //Adding to the dealer's hand until it reaches 5 cards or reaches/passes 17
                        dCount = 1;
                        dSum = calculateDSum(dHandValues, dSum);
                        while(dSum<=17 && dCount<5) 
                        {
                            randomize();
                            dHandValues[dCount] = cValues[rand];
                            dHandNames[dCount] = cNames[rand];
                            
                            if (dCount==1)
                                lblDHand2.setText(dHandNames[dCount]);
                            else if (dCount==2)
                                lblDHand3.setText(dHandNames[dCount]);
                            else if (dCount==3)
                                lblDHand4.setText(dHandNames[dCount]);
                            else
                                lblDHand5.setText(dHandNames[dCount]);
                            
                            dCount++;
                            dSum = calculateDSum(dHandValues, dSum);
                        }
                        
                        //Determining the final results of the round (when the player doesn't bust)
                        if (dSum>21)
                        {
                            lblNarr1.setText("The dealer busts! You win the round!");
                            lblNarr2.setText("Please enter your next wager.");
                            payroll+=(wager*2);
                        }
                        else if (pSum>dSum)
                        {
                            lblNarr1.setText("You win the round!");
                            lblNarr2.setText("Please enter your next wager.");
                            payroll+=(wager*2);
                        }
                        else if (pSum<dSum)
                        {
                            lblNarr1.setText("You lose the round...");
                            lblNarr2.setText("Please enter your next wager.");
                        }
                        else if (pSum==dSum)
                        {
                            lblNarr1.setText("You tie! You keep your wager.");
                            lblNarr2.setText("Please enter your next wager.");
                            payroll+=wager;
                        }
                        else
                        {
                            lblNarr1.setText("What happened???");
                            lblNarr2.setText("Please enter your next wager.");
                            return;
                        }
                        
                    }
                    
                    //Resetting variables
                    wager = 0;
                    pCount = 2;
                    
                    //Updating display
                    lblPayroll.setText("Current payroll: " + payroll);
                    lblWager.setText("Current wager: " + wager);
                    
                    rCount++; //Increases turn value
                }
                
                //CHECKS IF THE PAYROLL HAS FALLEN BELOW ZERO
                //If so, the program ends
                //Top message is "You're out of money!" Bottom message is "Game end."
                //Final scores are already there
                //A special boolean is set to TRUE. This prevents all other code from running.
                if (payroll <= 0)
                {
                    lblNarr1.setText("You're out of money!");
                    lblNarr2.setText("Game end.");
                    gameEnd = true;
                }
            }
        }
        else
        {
            lblNarr1.setText("Take a look at the final scores!");
            lblNarr2.setText("Game ended due to a lack of cards, lack of money, or user choice to quit.");
        }
        
    }//GEN-LAST:event_btnOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmBlackJackV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmBlackJackV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmBlackJackV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmBlackJackV2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmBlackJackV2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    public static javax.swing.JLabel lblDHand1;
    public static javax.swing.JLabel lblDHand2;
    public static javax.swing.JLabel lblDHand3;
    public static javax.swing.JLabel lblDHand4;
    public static javax.swing.JLabel lblDHand5;
    private javax.swing.JLabel lblDesc1;
    private javax.swing.JLabel lblDesc2;
    private javax.swing.JLabel lblDesc3;
    public static javax.swing.JLabel lblNarr1;
    public static javax.swing.JLabel lblNarr2;
    public static javax.swing.JLabel lblPHand1;
    public static javax.swing.JLabel lblPHand2;
    public static javax.swing.JLabel lblPHand3;
    public static javax.swing.JLabel lblPHand4;
    public static javax.swing.JLabel lblPHand5;
    public static javax.swing.JLabel lblPayroll;
    private javax.swing.JLabel lblTitle;
    public static javax.swing.JLabel lblWager;
    public static javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables
}
