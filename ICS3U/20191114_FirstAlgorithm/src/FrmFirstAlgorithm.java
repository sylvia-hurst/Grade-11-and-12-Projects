/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hu765630
 * Name: Sylvia Hurst
 * Teacher's Name: Mr. Yeung
 * Course: ICS
 * Start Date: November 14, 2019
 * End Date: November 15, 2019
 * Description: Developing an algorithm software for an alien planet.
 * 
 * IMPORTANT NOTE: I can't trust myself to remember all the weird names for currencies,
 * so I decided to change them all to something simpler that I can understand better.

   Lowest valued currency: Pon
   Space Token = 500 Pons
   Star Token = 1000 Pons
   Cosmo Token = 10,000 Pons
   Spirit Token = 50,000 Pons
   Rift Token = 100,000 Pons
   
   Pseudo code:
   * This code plays when the "Calculate!" button is pressed
    
   * input = inputted text
    
   * Calculate # of Rift Tokens: riftTokens = input / 100000. Rounded down to the nearest integer
   * Calculate remaining Pons: remainder = input % 100000.
   * Set the corresponding label to display the calculated number of Rift Tokens.
    
   * Calculate # of Spirit Tokens: spiritTokens = remainder / 50000. Rounded down to the nearest integer
   * Calculate remaining Pons: remainder = remainder % 50000.
   * Set the corresponding label to display the calculated number of Spirit Tokens.
    
   * Calculate # of Cosmo Tokens: cosmoTokens = remainder / 100). Rounded down to the nearest integer
   * Calculate remaining Pons: remainder = remainder % 10000.
   * Set the corresponding label to display the calculated number of Cosmo Tokens.
    
   * Calculate # of Star Tokens: starTokens = remainder / 1000. Rounded down to the nearest integer
   * Calculate remaining Pons: remainder = remainder % 1000.
   * Set the corresponding label to display the calculated number of Star Tokens.
    
   * Calculate # of Space Tokens: spaceTokens = remainder / 50. Rounded down to the nearest integer
   * Calculate remaining Pons: pons = remainder % 500.
   * Set the corresponding label to display the calculated number of Space Tokens.

   * Set the corresponding label to display the calculated number of remaining Pons.
    
   * Testing to verify correct values:
   * totalPons = riftTokens*100000 + spiritTokens*50000 + cosmoTokens*10000 + starTokens*1000 + spaceTokens*500 + pons.
   * ^ After testing this and being successful, I removed this part of the code from the final program.

 */
public class FrmFirstAlgorithm extends javax.swing.JFrame {

    /**
     * Creates new form FrmFirstAlgorithm
     */
    public FrmFirstAlgorithm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblRift = new javax.swing.JLabel();
        lblSpirit = new javax.swing.JLabel();
        lblCosmo = new javax.swing.JLabel();
        lblStar = new javax.swing.JLabel();
        lblSpace = new javax.swing.JLabel();
        lblPons = new javax.swing.JLabel();
        txtPonValue = new javax.swing.JTextField();
        btnCalc = new javax.swing.JButton();
        lblDesc1 = new javax.swing.JLabel();
        lblDesc2 = new javax.swing.JLabel();
        lblImg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Pons to Tokens Calculator");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(20, 10, 360, 50);

        lblRift.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblRift.setText("Rift Tokens: ");
        getContentPane().add(lblRift);
        lblRift.setBounds(200, 60, 190, 40);

        lblSpirit.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblSpirit.setText("Spirit Tokens: ");
        getContentPane().add(lblSpirit);
        lblSpirit.setBounds(200, 110, 190, 40);

        lblCosmo.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblCosmo.setText("Cosmo Tokens: ");
        getContentPane().add(lblCosmo);
        lblCosmo.setBounds(200, 160, 190, 40);

        lblStar.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblStar.setText("Star Tokens: ");
        getContentPane().add(lblStar);
        lblStar.setBounds(200, 210, 190, 40);

        lblSpace.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblSpace.setText("Space Tokens: ");
        getContentPane().add(lblSpace);
        lblSpace.setBounds(200, 260, 190, 40);

        lblPons.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lblPons.setText("Pons: ");
        getContentPane().add(lblPons);
        lblPons.setBounds(200, 310, 200, 40);

        txtPonValue.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        txtPonValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPonValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPonValueActionPerformed(evt);
            }
        });
        getContentPane().add(txtPonValue);
        txtPonValue.setBounds(20, 230, 150, 30);

        btnCalc.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btnCalc.setText("Calculate!");
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalc);
        btnCalc.setBounds(20, 280, 150, 60);

        lblDesc1.setFont(new java.awt.Font("Consolas", 2, 12)); // NOI18N
        lblDesc1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDesc1.setText("Enter your Pons");
        lblDesc1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(lblDesc1);
        lblDesc1.setBounds(20, 180, 160, 20);

        lblDesc2.setFont(new java.awt.Font("Consolas", 2, 12)); // NOI18N
        lblDesc2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDesc2.setText("and press \"Calculate!\"");
        lblDesc2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(lblDesc2);
        lblDesc2.setBounds(20, 200, 160, 20);

        lblImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage/Money.png"))); // NOI18N
        getContentPane().add(lblImg);
        lblImg.setBounds(30, 60, 140, 110);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcActionPerformed
        
        //Variable declarations
        int input, remainder, pons, spaceTokens, starTokens, cosmoTokens, spiritTokens, riftTokens;
        
        //Receiving input from the text box, for the initial Pon value
        input = Integer.parseInt(txtPonValue.getText());
    
        //Determining and outputting the # of Rift Tokens and saving the remainder for the next stage
        riftTokens = (int) Math.floor(input / 100000);
        remainder = input % 100000;
        lblRift.setText("Rift Tokens: " + String.valueOf(riftTokens));

        //Determining and outputting the # of Spirit Tokens and saving the remainder for the next stage
        spiritTokens = (int) Math.floor(remainder / 50000);
        remainder = remainder % 50000;
        lblSpirit.setText("Spirit Tokens: " + String.valueOf(spiritTokens));

        //Determining and outputting the # of Cosmo Tokens and saving the remainder for the next stage
        cosmoTokens = (int) Math.floor(remainder / 10000);
        remainder = remainder % 10000;
        lblCosmo.setText("Cosmo Tokens: " + String.valueOf(cosmoTokens));

        //Determining and outputting the # of Star Tokens and saving the remainder for the next stage
        starTokens = (int) Math.floor(remainder / 1000);
        remainder = remainder % 1000;
        lblStar.setText("Star Tokens: " + String.valueOf(starTokens));

        //Determining and outputting the # of Space Tokens and using the remainder value as the final leftover Pon value
        spaceTokens = (int) Math.floor(remainder / 500);
        pons = remainder % 500;
        lblSpace.setText("Space Tokens: " + String.valueOf(spaceTokens));
        
        //Outputting the leftover Pon value
        lblPons.setText("Pons: " + String.valueOf(pons));
        
    }//GEN-LAST:event_btnCalcActionPerformed

    private void txtPonValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPonValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPonValueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFirstAlgorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFirstAlgorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFirstAlgorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFirstAlgorithm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFirstAlgorithm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalc;
    private javax.swing.JLabel lblCosmo;
    private javax.swing.JLabel lblDesc1;
    private javax.swing.JLabel lblDesc2;
    private javax.swing.JLabel lblImg;
    private javax.swing.JLabel lblPons;
    private javax.swing.JLabel lblRift;
    private javax.swing.JLabel lblSpace;
    private javax.swing.JLabel lblSpirit;
    private javax.swing.JLabel lblStar;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPonValue;
    // End of variables declaration//GEN-END:variables
}
