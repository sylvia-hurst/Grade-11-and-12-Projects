/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hu765630
 * Name: Sylvia Hurst
 * Teacher's Name: Mr. Yeung
 * Course: ICS
 * Start Date: October 27, 2020
 * End Date: November 9, 2020
 * Description: Creating a project working in collaboration with
 * the teacher involving GUI, GitHub, arrays, multiple classes.
 * 
 * This is a farming simulator game. You have five crops, each with
 * their own stats for how quickly they grow, how often they need
 * to be watered, how much they yield on average when ripe, etc.
 * Your goal is to take care of the plants and harvest them when
 * necessary to fill each randomly assigned quota you have. Once
 * the quota is filled, you will receive a congratulatory message,
 * and you will be free to restart the game if you wish.
 * 
 * TO-DO:
 * - TBD
 * 
 */

import javax.swing.JOptionPane; //For choosing a plant when replanting

public class FrmFarmSim extends javax.swing.JFrame {

    /**
     * Creates new form FrmFarmSim
     */
    public FrmFarmSim() {
        this.crop1 = new Crop(0, 0, 0, 0);
        this.crop2 = new Crop(0, 0, 0, 0);
        this.crop3 = new Crop(0, 0, 0, 0);
        this.crop4 = new Crop(0, 0, 0, 0);
        this.crop5 = new Crop(0, 0, 0, 0);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        lblCrop1 = new javax.swing.JLabel();
        lblCrop2 = new javax.swing.JLabel();
        lblCrop3 = new javax.swing.JLabel();
        lblCrop4 = new javax.swing.JLabel();
        lblCrop5 = new javax.swing.JLabel();
        lblM1 = new javax.swing.JLabel();
        lblM2 = new javax.swing.JLabel();
        lblM3 = new javax.swing.JLabel();
        lblM4 = new javax.swing.JLabel();
        lblM5 = new javax.swing.JLabel();
        lblR1 = new javax.swing.JLabel();
        lblR2 = new javax.swing.JLabel();
        lblR3 = new javax.swing.JLabel();
        lblR4 = new javax.swing.JLabel();
        lblR5 = new javax.swing.JLabel();
        lblW1 = new javax.swing.JLabel();
        lblW2 = new javax.swing.JLabel();
        lblW3 = new javax.swing.JLabel();
        lblW4 = new javax.swing.JLabel();
        lblW5 = new javax.swing.JLabel();
        lblQuota = new javax.swing.JLabel();
        lblC1 = new javax.swing.JLabel();
        lblC2 = new javax.swing.JLabel();
        lblC3 = new javax.swing.JLabel();
        lblC4 = new javax.swing.JLabel();
        lblC5 = new javax.swing.JLabel();
        lblWeather = new javax.swing.JLabel();
        lblDays = new javax.swing.JLabel();
        btnW1 = new javax.swing.JButton();
        btnW2 = new javax.swing.JButton();
        btnW3 = new javax.swing.JButton();
        btnW4 = new javax.swing.JButton();
        btnW5 = new javax.swing.JButton();
        btnH1 = new javax.swing.JButton();
        btnH2 = new javax.swing.JButton();
        btnH3 = new javax.swing.JButton();
        btnH4 = new javax.swing.JButton();
        btnH5 = new javax.swing.JButton();
        btnR1 = new javax.swing.JButton();
        btnR2 = new javax.swing.JButton();
        btnR3 = new javax.swing.JButton();
        btnR4 = new javax.swing.JButton();
        btnR5 = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Fantastic Farming Simulator");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(174, 9, 360, 40);

        lblDesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDesc.setText("Welcome! To begin, click \"START\" to obtain your crop quotas. Grow all the crops you need!");
        getContentPane().add(lblDesc);
        lblDesc.setBounds(40, 50, 630, 20);

        lblCrop1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCrop1.setForeground(new java.awt.Color(255, 255, 0));
        lblCrop1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrop1.setText("Corn");
        getContentPane().add(lblCrop1);
        lblCrop1.setBounds(50, 80, 110, 20);

        lblCrop2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCrop2.setForeground(new java.awt.Color(255, 0, 0));
        lblCrop2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrop2.setText("Tomatoes");
        getContentPane().add(lblCrop2);
        lblCrop2.setBounds(170, 80, 110, 20);

        lblCrop3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCrop3.setForeground(new java.awt.Color(153, 102, 0));
        lblCrop3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrop3.setText("Potatoes");
        getContentPane().add(lblCrop3);
        lblCrop3.setBounds(300, 80, 110, 20);

        lblCrop4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCrop4.setForeground(new java.awt.Color(255, 153, 0));
        lblCrop4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrop4.setText("Carrots");
        getContentPane().add(lblCrop4);
        lblCrop4.setBounds(430, 80, 110, 20);

        lblCrop5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCrop5.setForeground(new java.awt.Color(0, 204, 0));
        lblCrop5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCrop5.setText("Peas");
        getContentPane().add(lblCrop5);
        lblCrop5.setBounds(550, 80, 110, 20);

        lblM1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblM1.setText("Maturity");
        getContentPane().add(lblM1);
        lblM1.setBounds(50, 110, 110, 20);

        lblM2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblM2.setText("Maturity");
        getContentPane().add(lblM2);
        lblM2.setBounds(170, 110, 110, 20);

        lblM3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblM3.setText("Maturity");
        getContentPane().add(lblM3);
        lblM3.setBounds(300, 110, 110, 20);

        lblM4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblM4.setText("Maturity");
        getContentPane().add(lblM4);
        lblM4.setBounds(430, 110, 110, 20);

        lblM5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblM5.setText("Maturity");
        getContentPane().add(lblM5);
        lblM5.setBounds(550, 110, 110, 20);

        lblR1.setForeground(new java.awt.Color(102, 0, 0));
        lblR1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR1.setText("Ripeness");
        getContentPane().add(lblR1);
        lblR1.setBounds(50, 130, 110, 20);

        lblR2.setForeground(new java.awt.Color(102, 51, 0));
        lblR2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR2.setText("Ripeness");
        getContentPane().add(lblR2);
        lblR2.setBounds(170, 130, 110, 20);

        lblR3.setForeground(new java.awt.Color(102, 0, 0));
        lblR3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR3.setText("Ripeness");
        getContentPane().add(lblR3);
        lblR3.setBounds(300, 130, 110, 20);

        lblR4.setForeground(new java.awt.Color(102, 0, 0));
        lblR4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR4.setText("Ripeness");
        getContentPane().add(lblR4);
        lblR4.setBounds(430, 130, 110, 20);

        lblR5.setForeground(new java.awt.Color(102, 0, 0));
        lblR5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR5.setText("Ripeness");
        getContentPane().add(lblR5);
        lblR5.setBounds(550, 130, 110, 20);

        lblW1.setForeground(new java.awt.Color(102, 51, 0));
        lblW1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblW1.setText("Moisture");
        getContentPane().add(lblW1);
        lblW1.setBounds(50, 150, 110, 20);

        lblW2.setForeground(new java.awt.Color(102, 51, 0));
        lblW2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblW2.setText("Moisture");
        getContentPane().add(lblW2);
        lblW2.setBounds(170, 150, 110, 20);

        lblW3.setForeground(new java.awt.Color(102, 51, 0));
        lblW3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblW3.setText("Moisture");
        getContentPane().add(lblW3);
        lblW3.setBounds(300, 150, 110, 20);

        lblW4.setForeground(new java.awt.Color(102, 51, 0));
        lblW4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblW4.setText("Moisture");
        getContentPane().add(lblW4);
        lblW4.setBounds(430, 150, 110, 20);

        lblW5.setForeground(new java.awt.Color(102, 51, 0));
        lblW5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblW5.setText("Moisture");
        getContentPane().add(lblW5);
        lblW5.setBounds(550, 150, 110, 20);

        lblQuota.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblQuota.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuota.setText("Quotas: X cobs of corn, X tomatoes, X potatoes, X carrots, and X pods of peas.");
        getContentPane().add(lblQuota);
        lblQuota.setBounds(20, 360, 670, 30);

        lblC1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblC1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC1.setText("Cobs of corn collected: X");
        getContentPane().add(lblC1);
        lblC1.setBounds(270, 390, 170, 40);

        lblC2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblC2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC2.setText("Tomatoes collected: X");
        getContentPane().add(lblC2);
        lblC2.setBounds(270, 420, 170, 40);

        lblC3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblC3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC3.setText("Potatoes collected: X");
        getContentPane().add(lblC3);
        lblC3.setBounds(270, 450, 170, 40);

        lblC4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblC4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC4.setText("Carrots collected: X");
        getContentPane().add(lblC4);
        lblC4.setBounds(270, 480, 170, 40);

        lblC5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblC5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblC5.setText("Pods of peas collected: X");
        getContentPane().add(lblC5);
        lblC5.setBounds(270, 510, 170, 40);

        lblWeather.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblWeather.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWeather.setText("Weather: Clear");
        getContentPane().add(lblWeather);
        lblWeather.setBounds(80, 310, 170, 40);

        lblDays.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDays.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDays.setText("Days Passed: X");
        getContentPane().add(lblDays);
        lblDays.setBounds(460, 310, 170, 40);

        btnW1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnW1.setForeground(new java.awt.Color(204, 204, 204));
        btnW1.setText("WATER");
        btnW1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW1);
        btnW1.setBounds(60, 180, 90, 30);

        btnW2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnW2.setForeground(new java.awt.Color(204, 204, 204));
        btnW2.setText("WATER");
        btnW2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW2);
        btnW2.setBounds(180, 180, 90, 30);

        btnW3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnW3.setForeground(new java.awt.Color(204, 204, 204));
        btnW3.setText("WATER");
        btnW3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW3ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW3);
        btnW3.setBounds(310, 180, 90, 30);

        btnW4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnW4.setForeground(new java.awt.Color(204, 204, 204));
        btnW4.setText("WATER");
        btnW4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW4ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW4);
        btnW4.setBounds(440, 180, 90, 30);

        btnW5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnW5.setForeground(new java.awt.Color(204, 204, 204));
        btnW5.setText("WATER");
        btnW5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnW5ActionPerformed(evt);
            }
        });
        getContentPane().add(btnW5);
        btnW5.setBounds(560, 180, 90, 30);

        btnH1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnH1.setForeground(new java.awt.Color(204, 204, 204));
        btnH1.setText("HARVEST");
        btnH1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnH1);
        btnH1.setBounds(60, 220, 90, 30);

        btnH2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnH2.setForeground(new java.awt.Color(204, 204, 204));
        btnH2.setText("HARVEST");
        btnH2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnH2);
        btnH2.setBounds(180, 220, 90, 30);

        btnH3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnH3.setForeground(new java.awt.Color(204, 204, 204));
        btnH3.setText("HARVEST");
        btnH3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH3ActionPerformed(evt);
            }
        });
        getContentPane().add(btnH3);
        btnH3.setBounds(310, 220, 90, 30);

        btnH4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnH4.setForeground(new java.awt.Color(204, 204, 204));
        btnH4.setText("HARVEST");
        btnH4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH4ActionPerformed(evt);
            }
        });
        getContentPane().add(btnH4);
        btnH4.setBounds(440, 220, 90, 30);

        btnH5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnH5.setForeground(new java.awt.Color(204, 204, 204));
        btnH5.setText("HARVEST");
        btnH5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH5ActionPerformed(evt);
            }
        });
        getContentPane().add(btnH5);
        btnH5.setBounds(560, 220, 90, 30);

        btnR1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnR1.setForeground(new java.awt.Color(204, 204, 204));
        btnR1.setText("REPLANT");
        btnR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnR1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnR1);
        btnR1.setBounds(60, 260, 90, 30);

        btnR2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnR2.setForeground(new java.awt.Color(204, 204, 204));
        btnR2.setText("REPLANT");
        btnR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnR2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnR2);
        btnR2.setBounds(180, 260, 90, 30);

        btnR3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnR3.setForeground(new java.awt.Color(204, 204, 204));
        btnR3.setText("REPLANT");
        btnR3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnR3ActionPerformed(evt);
            }
        });
        getContentPane().add(btnR3);
        btnR3.setBounds(310, 260, 90, 30);

        btnR4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnR4.setForeground(new java.awt.Color(204, 204, 204));
        btnR4.setText("REPLANT");
        btnR4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnR4ActionPerformed(evt);
            }
        });
        getContentPane().add(btnR4);
        btnR4.setBounds(440, 260, 90, 30);

        btnR5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnR5.setForeground(new java.awt.Color(204, 204, 204));
        btnR5.setText("REPLANT");
        btnR5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnR5ActionPerformed(evt);
            }
        });
        getContentPane().add(btnR5);
        btnR5.setBounds(560, 260, 90, 30);

        btnStart.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnStart.setText("START");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        getContentPane().add(btnStart);
        btnStart.setBounds(290, 310, 130, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Variable declarations:
    
    //GENERAL VARIABLES (Set-up, buttons, objects...)
    
    //Placeholder crop objects
    Crop crop1;
    Crop crop2;
    Crop crop3;
    Crop crop4;
    Crop crop5;
    
    //Game started or not? If started, the END DAY button serves its
    //function and the remaining buttons are available to click
    boolean started = false;
    
    //Day counter
    int days = 0;

    //Action button availability booleans
    boolean btnW1A=false, btnW2A=false, btnW3A=false, btnW4A=false, btnW5A=false, 
            btnH1A=false, btnH2A=false, btnH3A=false, btnH4A=false, btnH5A=false, 
            btnR1A=false, btnR2A=false, btnR3A=false, btnR4A=false, btnR5A=false;
    
    //PLANT STAT VARIABLES
    //Order: Corn, Tomatoes, Potatoes, Carrots, Peas
    
    //Crop value (to keep track of which crops are in which positions
    //Important after replants have been made
    int cropVal[] = {0, 1, 2, 3, 4};
    
    //Maturity values
    int maturity[] = {0, 0, 0, 0, 0};
    
    //Array to host ripeness names
    String ripeness[] = {"Underripe", "Ripe", "Overripe"};
    
    //Each plant has a value of 0 to 2 that represents which level they're at.
    //Corresponds with the String array.
    int ripe[] = {0, 0, 0, 0, 0};
    
    //Each plant also has a ripeness "meter". These variables represent the
    //ripening point for each plant. Ex. when the peas' meter goes from 26 to 29,
    //it will be ripe for 1 day. So, each plant has a ripeLvl and ripePoint.
    //The ripeLvl variable is created by the constructor.
    static int ripePoint[] = {43, 36, 42, 31, 27};
    
    //Array to host moisture names
    String moisture[] = {"Dry", "Moist", "Wet"};
    
    //Each plant has a value of 0 to 2 that represents which level they're at.
    //Corresponds with the String array.
    int moist[] = {0, 0, 0, 0, 0};
    
    //Each plant also has a "hydration level". This determines how long the plant
    //stays moist after being watered. (Note that the Wet status always goes away
    //after one day. This is just for the Moist status.) There is a moistCount
    //variable created by the constructor to count the days until the plant becomes dry.
    static int hydration[] = {2, 3, 1, 2, 3};
    
    //Yield: The range of produce collected when you harvest it when it’s ripe.
    static int yMin[] = {12, 19, 3, 5, 25};
    static int yMax[] = {15, 24, 7, 10, 30};
    
    //Quota range: The range that the associated quota will be in, for fairness.
    //(It is always 5 times the yield’s range.) These never change, so there
    //aren't min/max variables but instead just the array to host the chosen
    //quotas for each crop. The quotas are randomized at the start of the game.
    int quota[] = {0, 0, 0, 0, 0};

    //Amount collected
    int collected[] = {0, 0, 0, 0, 0};
    
    //MISC VARIABLES (For special events)
    //Integer input variable for choosing a plant to replace a crop with
    int input = 0;
    
    //Integer for a randomly selected number that determines the weather
    int roll = 0;
    
    //Boolean to check if it's cloudy (when cloudy, sunlight is limited,
    //so crops will not ripen that night)
    static boolean cloudy = false;
    
    //Methods:
    
    //Display all data
    public void displayAll(){
        //Days
        lblDays.setText("Days Passed: "+days);
        
        //Maturity
        if (maturity[0]==1){
            lblM1.setText(maturity[0]+" day old");
        } else {
            lblM1.setText(maturity[0]+" days old");
        }
        if (maturity[1]==1){
            lblM2.setText(maturity[1]+" day old");
        } else {
            lblM2.setText(maturity[1]+" days old");
        }
        if (maturity[2]==1){
            lblM3.setText(maturity[2]+" day old");
        } else {
            lblM3.setText(maturity[2]+" days old");
        }
        if (maturity[3]==1){
            lblM4.setText(maturity[3]+" day old");
        } else {
            lblM4.setText(maturity[3]+" days old");
        }
        if (maturity[4]==1){
            lblM5.setText(maturity[4]+" day old");
        } else {
            lblM5.setText(maturity[4]+" days old");
        }
        //Ripeness
        lblR1.setText(ripeness[ripe[0]]);
        lblR2.setText(ripeness[ripe[1]]);
        lblR3.setText(ripeness[ripe[2]]);
        lblR4.setText(ripeness[ripe[3]]);
        lblR5.setText(ripeness[ripe[4]]);
        //Moisture (Wetness)
        lblW1.setText(moisture[moist[0]]);
        lblW2.setText(moisture[moist[1]]);
        lblW3.setText(moisture[moist[2]]);
        lblW4.setText(moisture[moist[3]]);
        lblW5.setText(moisture[moist[4]]);
        //Amount collected
        lblC1.setText("Cobs of corn collected: "+collected[0]);
        lblC2.setText("Tomatoes collected: "+collected[1]);
        lblC3.setText("Potatoes collected: "+collected[2]);
        lblC4.setText("Carrots collected: "+collected[3]);
        lblC5.setText("Pods of peas collected: "+collected[4]);
        
        //For Ripeness and Moisture, the text
        //colour changes based on the current value.
        
        //Ripeness
        if (ripe[0]==0){
            lblR1.setForeground(new java.awt.Color(102, 0, 0));
        } else if (ripe[0]==1){
            lblR1.setForeground(new java.awt.Color(153, 204, 0));
        } else {
            lblR1.setForeground(new java.awt.Color(204, 102, 0));
        }
        if (ripe[1]==0){
            lblR2.setForeground(new java.awt.Color(102, 0, 0));
        } else if (ripe[1]==1){
            lblR2.setForeground(new java.awt.Color(153, 204, 0));
        } else {
            lblR2.setForeground(new java.awt.Color(204, 102, 0));
        }
        if (ripe[2]==0){
            lblR3.setForeground(new java.awt.Color(102, 0, 0));
        } else if (ripe[2]==1){
            lblR3.setForeground(new java.awt.Color(153, 204, 0));
        } else {
            lblR3.setForeground(new java.awt.Color(204, 102, 0));
        }
        if (ripe[3]==0){
            lblR4.setForeground(new java.awt.Color(102, 0, 0));
        } else if (ripe[3]==1){
            lblR4.setForeground(new java.awt.Color(153, 204, 0));
        } else {
            lblR4.setForeground(new java.awt.Color(204, 102, 0));
        }
        if (ripe[4]==0){
            lblR5.setForeground(new java.awt.Color(102, 0, 0));
        } else if (ripe[4]==1){
            lblR5.setForeground(new java.awt.Color(153, 204, 0));
        } else {
            lblR5.setForeground(new java.awt.Color(204, 102, 0));
        }
        
        //Moisture (Wetness)
        if (moist[0]==0){
            lblW1.setForeground(new java.awt.Color(102, 51, 0));
        } else if (moist[0]==1){
            lblW1.setForeground(new java.awt.Color(0, 102, 102));
        } else {
            lblW1.setForeground(new java.awt.Color(51, 51, 255));
        }
        if (moist[1]==0){
            lblW2.setForeground(new java.awt.Color(102, 51, 0));
        } else if (moist[1]==1){
            lblW2.setForeground(new java.awt.Color(0, 102, 102));
        } else {
            lblW2.setForeground(new java.awt.Color(51, 51, 255));
        }
        if (moist[2]==0){
            lblW3.setForeground(new java.awt.Color(102, 51, 0));
        } else if (moist[2]==1){
            lblW3.setForeground(new java.awt.Color(0, 102, 102));
        } else {
            lblW3.setForeground(new java.awt.Color(51, 51, 255));
        }
        if (moist[3]==0){
            lblW4.setForeground(new java.awt.Color(102, 51, 0));
        } else if (moist[3]==1){
            lblW4.setForeground(new java.awt.Color(0, 102, 102));
        } else {
            lblW4.setForeground(new java.awt.Color(51, 51, 255));
        }
        if (moist[4]==0){
            lblW5.setForeground(new java.awt.Color(102, 51, 0));
        } else if (moist[4]==1){
            lblW5.setForeground(new java.awt.Color(0, 102, 102));
        } else {
            lblW5.setForeground(new java.awt.Color(51, 51, 255));
        }
        
        //If the 'collected' value meets or exceeds the
        //associated quota, the text turns green.
        if (collected[0]>=quota[0]){
            lblC1.setForeground(new java.awt.Color(0, 153, 0));
        } else {
            lblC1.setForeground(new java.awt.Color(0, 0, 0));
        }
        if (collected[1]>=quota[1]){
            lblC2.setForeground(new java.awt.Color(0, 153, 0));
        } else {
            lblC2.setForeground(new java.awt.Color(0, 0, 0));
        }
        if (collected[2]>=quota[2]){
            lblC3.setForeground(new java.awt.Color(0, 153, 0));
        } else {
            lblC3.setForeground(new java.awt.Color(0, 0, 0));
        }
        if (collected[3]>=quota[3]){
            lblC4.setForeground(new java.awt.Color(0, 153, 0));
        } else {
            lblC4.setForeground(new java.awt.Color(0, 0, 0));
        }
        if (collected[4]>=quota[4]){
            lblC5.setForeground(new java.awt.Color(0, 153, 0));
        } else {
            lblC5.setForeground(new java.awt.Color(0, 0, 0));
        }
        
    }
    
    //Open buttons
    public void openButtons(){
        //Sets their availability boolean to true
        btnW1A=true; btnW2A=true; btnW3A=true; btnW4A=true; btnW5A=true;
        btnH1A=true; btnH2A=true; btnH3A=true; btnH4A=true; btnH5A=true;
        btnR1A=true; btnR2A=true; btnR3A=true; btnR4A=true; btnR5A=true;
        //Sets the colours from grey to the correct dark colour
        //Water button (dark blue)
        btnW1.setForeground(new java.awt.Color(0, 0, 102));
        btnW2.setForeground(new java.awt.Color(0, 0, 102));
        btnW3.setForeground(new java.awt.Color(0, 0, 102));
        btnW4.setForeground(new java.awt.Color(0, 0, 102));
        btnW5.setForeground(new java.awt.Color(0, 0, 102));
        //Harvest button (dark brown)
        btnH1.setForeground(new java.awt.Color(0, 102, 0));
        btnH2.setForeground(new java.awt.Color(0, 102, 0));
        btnH3.setForeground(new java.awt.Color(0, 102, 0));
        btnH4.setForeground(new java.awt.Color(0, 102, 0));
        btnH5.setForeground(new java.awt.Color(0, 102, 0));
        //Replant button (dark grey)
        btnR1.setForeground(new java.awt.Color(51, 51, 51));
        btnR2.setForeground(new java.awt.Color(51, 51, 51));
        btnR3.setForeground(new java.awt.Color(51, 51, 51));
        btnR4.setForeground(new java.awt.Color(51, 51, 51));
        btnR5.setForeground(new java.awt.Color(51, 51, 51));
    }
    
    //Check completion (occurs after every harvest)
    public void checkCompletion(){
        //Checks if all quotas have been met
        if (collected[0]>=quota[0]&&collected[1]>=quota[1]&&collected[2]>=quota[2]&&collected[3]>=quota[3]&&collected[4]>=quota[4]){
            //Displays congratulatory message in green to replace the description label
            lblDesc.setText("Congratulations! You have met every quota in "+days+" days!");
            lblDesc.setForeground(new java.awt.Color(0, 153, 0));
            
            //Resets some variables
            for (int i=0;i<5;i++){
                maturity[i] = 0;
                ripe[i] = 0;
                moist[i] = 0;
                collected[i] = 0;
            }
            days = 0;
            
            //Closes all action buttons
            //Sets their availability boolean to false
            btnW1A=false; btnW2A=false; btnW3A=false; btnW4A=false; btnW5A=false;
            btnH1A=false; btnH2A=false; btnH3A=false; btnH4A=false; btnH5A=false;
            btnR1A=false; btnR2A=false; btnR3A=false; btnR4A=false; btnR5A=false;
            //Sets the colours to grey
            //Water button
            btnW1.setForeground(new java.awt.Color(204, 204, 204));
            btnW2.setForeground(new java.awt.Color(204, 204, 204));
            btnW3.setForeground(new java.awt.Color(204, 204, 204));
            btnW4.setForeground(new java.awt.Color(204, 204, 204));
            btnW5.setForeground(new java.awt.Color(204, 204, 204));
            //Harvest button
            btnH1.setForeground(new java.awt.Color(204, 204, 204));
            btnH2.setForeground(new java.awt.Color(204, 204, 204));
            btnH3.setForeground(new java.awt.Color(204, 204, 204));
            btnH4.setForeground(new java.awt.Color(204, 204, 204));
            btnH5.setForeground(new java.awt.Color(204, 204, 204));
            //Replant button
            btnR1.setForeground(new java.awt.Color(204, 204, 204));
            btnR2.setForeground(new java.awt.Color(204, 204, 204));
            btnR3.setForeground(new java.awt.Color(204, 204, 204));
            btnR4.setForeground(new java.awt.Color(204, 204, 204));
            btnR5.setForeground(new java.awt.Color(204, 204, 204));
            
            //Resetting start button so the game can be replayed
            btnStart.setText("RESTART");
            started = false;
        }
    }
    
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        //START / END DAY button
        
        if (started==false){
            //FIRST DAY - Sets up every plant with default values,
            //creates and displays the quotas,
            //opens up the rest of the buttons for use,
            //and changes this button to "END DAY"
            
            //Constructing crops
            crop1 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
            crop2 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
            crop3 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
            crop4 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
            crop5 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
            
            //Displaying crop names (in case the game is reset after some crops changed)
            lblCrop1.setText("Corn");
            lblCrop1.setForeground(new java.awt.Color(255, 255, 0));
            cropVal[0] = 0;
            lblCrop2.setText("Tomatoes");
            lblCrop2.setForeground(new java.awt.Color(255, 0, 0));
            cropVal[1] = 1;
            lblCrop3.setText("Potatoes");
            lblCrop3.setForeground(new java.awt.Color(153, 102, 0));
            cropVal[2] = 2;
            lblCrop4.setText("Carrots");
            lblCrop4.setForeground(new java.awt.Color(255, 153, 0));
            cropVal[3] = 3;
            lblCrop5.setText("Peas");
            lblCrop5.setForeground(new java.awt.Color(0, 204, 0));
            cropVal[4] = 4;
            
            //Setting up and displaying the quota
            quota[0] = (int)(Math.random()*15)+60;      //60-75
            quota[1] = (int)(Math.random()*25)+95;      //95-120
            quota[2] = (int)(Math.random()*20)+15;      //15-35
            quota[3] = (int)(Math.random()*25)+25;      //25-50
            quota[4] = (int)(Math.random()*25)+125;     //125-150
            lblQuota.setText("Quotas: "+quota[0]+" cobs of corn, "+quota[1]+" tomatoes, "+quota[2]+
                    " potatoes, "+quota[3]+" carrots, and "+quota[4]+" pods of peas.");
            
            //Displaying default weather
            lblWeather.setText("Weather: Clear");
            lblWeather.setForeground(new java.awt.Color(0, 0, 0));

            //Displaying crops' values on the form
            displayAll();
            
            //Opening up the buttons
            openButtons();
            
            //Changes the description message
            lblDesc.setText("Grow your plants! Water any dry plants and harvest any ripe plants.");
            lblDesc.setForeground(new java.awt.Color(0, 0, 0));
            
            //Sets the button to the "END DAY"
            btnStart.setText("END DAY");
            started = true;
        } else {
            //END DAY
            //Calls methods to determine new values for each plant's stats,
            //and updates that information. Opens the buttons again and
            //lets the player start a new day
            
            //Increases day count
            days++;
            
            //Calculating new plant variables
            
            //Increasing maturity
            for (int i=0;i<5;i++){
                maturity[i]++;
            }
            
            //Increasing ripeness
            crop1.calcRipeness(moist[0], maturity[0]);
            crop2.calcRipeness(moist[1], maturity[1]);
            crop3.calcRipeness(moist[2], maturity[2]);
            crop4.calcRipeness(moist[3], maturity[3]);
            crop5.calcRipeness(moist[4], maturity[4]);
            
            ripe[0] = crop1.getRipeness();
            ripe[1] = crop2.getRipeness();
            ripe[2] = crop3.getRipeness();
            ripe[3] = crop4.getRipeness();
            ripe[4] = crop5.getRipeness();
            
            //Checking moisture / potentially getting drier
            crop1.calcMoisture(moist[0]);
            crop2.calcMoisture(moist[1]);
            crop3.calcMoisture(moist[2]);
            crop4.calcMoisture(moist[3]);
            crop5.calcMoisture(moist[4]);
            
            moist[0] = crop1.getMoisture();
            moist[1] = crop2.getMoisture();
            moist[2] = crop3.getMoisture();
            moist[3] = crop4.getMoisture();
            moist[4] = crop5.getMoisture();
            
            //Potential stat override: WEATHER
            
            //Resetting cloudy boolean
            cloudy = false;
            
            //Rolling a random number from 1 to 20
            roll = (int)(Math.random()*20+1);
            
            //The result is based on the roll
            if (roll==1){
                //5% Blazing Sun - All crops are now dry.
                for (int i=0;i<5;i++){
                    moist[i]=0;
                }
                lblDesc.setText("The sun is blazing today! All crops have dried out.");
                lblWeather.setText("Weather: Blazing Sun");
                lblWeather.setForeground(new java.awt.Color(240, 0, 0));
                //Makes sure the moistCount variables are reset.
                crop1.resetMoistCount();
                crop2.resetMoistCount();
                crop3.resetMoistCount();
                crop4.resetMoistCount();
                crop5.resetMoistCount();
            } else if (roll==20){
                //5% Rain Storm - All crops are now wet. Like the cloudy
                //effect, the crops will not ripen the next day due to
                //their moisture being 2 instead of 1.
                for (int i=0;i<5;i++){
                    moist[i]=2;
                }
                lblDesc.setText("Rain is pouring down today! All crops have been soaked.");
                lblWeather.setText("Weather: Rain Storm");
                lblWeather.setForeground(new java.awt.Color(0, 0, 240));
            } else if (roll>15&&roll<20){ 
                //20% Cloudy - Crops do not ripen the next day.
                lblWeather.setForeground(new java.awt.Color(120, 120, 120));
                cloudy = true;
                lblDesc.setText("The clouds are blocking sunlight! Crops won't ripen tonight.");
                lblWeather.setText("Weather: Cloudy");
            } else if (roll>10&&roll<16){
                //20% Windy - No effects
                lblDesc.setText("It's a nice breezy day today. The crops are swaying in the wind.");
                lblWeather.setText("Weather: Windy");
                lblWeather.setForeground(new java.awt.Color(0, 0, 0));
            } else if (roll>1&&roll<11){ 
                //50% Clear - No effects
                lblDesc.setText("It's a beautiful day today. Keep on growing your plants!");
                lblWeather.setText("Weather: Clear");
                lblWeather.setForeground(new java.awt.Color(0, 0, 0));
            }
            
            //Updating information
            displayAll();
            
            //Opening up the buttons
            openButtons();
        }
        
    }//GEN-LAST:event_btnStartActionPerformed

    /* WATERING
    - Changes a Dry plant to Moist.
    - Changes a Moist plant to Wet.
    - Does nothing to a Wet plant.
    - Calls the displayAll method to update the information.
    - Closes the button until the next day.
    */
    
    private void btnW1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW1ActionPerformed
        
        if (btnW1A==true){
            if (moist[0]<2){
                moist[0]++;
            }
            displayAll();
            btnW1A=false;
            btnW1.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnW1ActionPerformed

    private void btnW2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW2ActionPerformed
        
        if (btnW2A==true){
            if (moist[1]<2){
                moist[1]++;
            }
            displayAll();
            btnW2A=false;
            btnW2.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnW2ActionPerformed

    private void btnW3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW3ActionPerformed
        
        if (btnW3A==true){
            if (moist[2]<2){
                moist[2]++;
            }
            displayAll();
            btnW3A=false;
            btnW3.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnW3ActionPerformed

    private void btnW4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW4ActionPerformed
        
        if (btnW4A==true){
            if (moist[3]<2){
                moist[3]++;
            }
            displayAll();
            btnW4A=false;
            btnW4.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnW4ActionPerformed

    private void btnW5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnW5ActionPerformed
        
        if (btnW5A==true){
            if (moist[4]<2){
                moist[4]++;
            }
            displayAll();
            btnW5A=false;
            btnW5.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnW5ActionPerformed

    /* HARVESTING
    - Resets the associated ripeLvl variable to 0.
    - If the plant was Ripe, a random yield value
    is calculated and added to the 'collected' variable.
    - Calls the displayAll method to update the information.
    - Closes the button until the next day.
    - Checks if all quotas are met and displays the win message if so.
    */
    
    private void btnH1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH1ActionPerformed
        
        if (btnH1A==true){
            crop1.harvest();
            collected[cropVal[0]] += crop1.getCollected();
            ripe[0] = crop1.getRipeness();
            displayAll();
            btnH1A=false;
            btnH1.setForeground(new java.awt.Color(204, 204, 204));
            checkCompletion();
        }
        
    }//GEN-LAST:event_btnH1ActionPerformed

    private void btnH2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH2ActionPerformed
        
        if (btnH2A==true){
            crop2.harvest();
            collected[cropVal[1]] += crop2.getCollected();
            ripe[1] = crop2.getRipeness();
            displayAll();
            btnH2A=false;
            btnH2.setForeground(new java.awt.Color(204, 204, 204));
            checkCompletion();
        }
        
    }//GEN-LAST:event_btnH2ActionPerformed

    private void btnH3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH3ActionPerformed
        
        if (btnH3A==true){
            crop3.harvest();
            collected[cropVal[2]] += crop3.getCollected();
            ripe[2] = crop3.getRipeness();
            displayAll();
            btnH3A=false;
            btnH3.setForeground(new java.awt.Color(204, 204, 204));
            checkCompletion();
        }
        
    }//GEN-LAST:event_btnH3ActionPerformed

    private void btnH4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH4ActionPerformed
        
        if (btnH4A==true){
            crop4.harvest();
            collected[cropVal[3]] += crop4.getCollected();
            ripe[3] = crop4.getRipeness();
            displayAll();
            btnH4A=false;
            btnH4.setForeground(new java.awt.Color(204, 204, 204));
            checkCompletion();
        }
        
    }//GEN-LAST:event_btnH4ActionPerformed

    private void btnH5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH5ActionPerformed
        
        if (btnH5A==true){
            crop5.harvest();
            collected[cropVal[4]] += crop5.getCollected();
            ripe[4] = crop5.getRipeness();
            displayAll();
            btnH5A=false;
            btnH5.setForeground(new java.awt.Color(204, 204, 204));
            checkCompletion();
        }
        
    }//GEN-LAST:event_btnH5ActionPerformed

    /* REPLANTING
    - A JOptionPane will pop up to prompt the user
    to input what kind of plant they want to change
    the selected crop to. (They type a number from 0 to 4.)
    - When selected, the crop's object's stats will change
    to the new crop's. The plant is given default values
    (0 days old, underripe). Only the moisture is retained.
    - The crop name above the stats also changes to reflect this.
    - If an improper number is put in the JOptionPane, it will
    simply reload and make you try again. No getting out of it.
    - Calls the displayAll method to update the information.
    - Closes the button until the next day.
    */
    
    private void btnR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnR1ActionPerformed
        
        if (btnR1A==true){
            while (true) {
                try {
                //Input window
                input = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Please enter a crop to replant in this position.\n"
                        + "0 - Corn\n"
                        + "1 - Tomatoes\n"
                        + "2 - Potatoes\n"
                        + "3 - Carrots\n"
                        + "4 - Peas",
                        "REPLANT",
                        JOptionPane.INFORMATION_MESSAGE));
                if (input>-1&&input<5){
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
            }
            switch (input) {
                case 0:
                    crop1 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
                    lblCrop1.setText("Corn");
                    lblCrop1.setForeground(new java.awt.Color(255, 255, 0));
                    cropVal[0] = 0;
                    break;
                case 1:
                    crop1 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
                    lblCrop1.setText("Tomatoes");
                    lblCrop1.setForeground(new java.awt.Color(255, 0, 0));
                    cropVal[0] = 1;
                    break;
                case 2:
                    crop1 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
                    lblCrop1.setText("Potatoes");
                    lblCrop1.setForeground(new java.awt.Color(153, 102, 0));
                    cropVal[0] = 2;
                    break;
                case 3:
                    crop1 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
                    lblCrop1.setText("Carrots");
                    lblCrop1.setForeground(new java.awt.Color(255, 153, 0));
                    cropVal[0] = 3;
                    break;
                case 4:
                    crop1 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
                    lblCrop1.setText("Peas");
                    lblCrop1.setForeground(new java.awt.Color(0, 204, 0));
                    cropVal[0] = 4;
                    break;
            }
            ripe[0] = crop1.getRipeness();
            maturity[0] = 0;
            displayAll();
            btnR1A=false;
            btnR1.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnR1ActionPerformed

    private void btnR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnR2ActionPerformed
        
        if (btnR2A==true){
            while (true) {
                try {
                //Input window
                input = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Please enter a crop to replant in this position.\n"
                        + "0 - Corn\n"
                        + "1 - Tomatoes\n"
                        + "2 - Potatoes\n"
                        + "3 - Carrots\n"
                        + "4 - Peas",
                        "REPLANT",
                        JOptionPane.INFORMATION_MESSAGE));
                if (input>-1&&input<5){
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
            }
            switch (input) {
                case 0:
                    crop2 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
                    lblCrop2.setText("Corn");
                    lblCrop2.setForeground(new java.awt.Color(255, 255, 0));
                    cropVal[1] = 0;
                    break;
                case 1:
                    crop2 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
                    lblCrop2.setText("Tomatoes");
                    lblCrop2.setForeground(new java.awt.Color(255, 0, 0));
                    cropVal[1] = 1;
                    break;
                case 2:
                    crop2 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
                    lblCrop2.setText("Potatoes");
                    lblCrop2.setForeground(new java.awt.Color(153, 102, 0));
                    cropVal[1] = 2;
                    break;
                case 3:
                    crop2 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
                    lblCrop2.setText("Carrots");
                    lblCrop2.setForeground(new java.awt.Color(255, 153, 0));
                    cropVal[1] = 3;
                    break;
                case 4:
                    crop2 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
                    lblCrop2.setText("Peas");
                    lblCrop2.setForeground(new java.awt.Color(0, 204, 0));
                    cropVal[1] = 4;
                    break;
            }
            maturity[1] = 0;
            ripe[1] = crop2.getRipeness();
            displayAll();
            btnR2A=false;
            btnR2.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnR2ActionPerformed

    private void btnR3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnR3ActionPerformed
        
        if (btnR3A==true){
            while (true) {
                try {
                //Input window
                input = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Please enter a crop to replant in this position.\n"
                        + "0 - Corn\n"
                        + "1 - Tomatoes\n"
                        + "2 - Potatoes\n"
                        + "3 - Carrots\n"
                        + "4 - Peas",
                        "REPLANT",
                        JOptionPane.INFORMATION_MESSAGE));
                if (input>-1&&input<5){
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
            }
            switch (input) {
                case 0:
                    crop3 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
                    lblCrop3.setText("Corn");
                    lblCrop3.setForeground(new java.awt.Color(255, 255, 0));
                    cropVal[2] = 0;
                    break;
                case 1:
                    crop3 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
                    lblCrop3.setText("Tomatoes");
                    lblCrop3.setForeground(new java.awt.Color(255, 0, 0));
                    cropVal[2] = 1;
                    break;
                case 2:
                    crop3 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
                    lblCrop3.setText("Potatoes");
                    lblCrop3.setForeground(new java.awt.Color(153, 102, 0));
                    cropVal[2] = 2;
                    break;
                case 3:
                    crop3 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
                    lblCrop3.setText("Carrots");
                    lblCrop3.setForeground(new java.awt.Color(255, 153, 0));
                    cropVal[2] = 3;
                    break;
                case 4:
                    crop3 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
                    lblCrop3.setText("Peas");
                    lblCrop3.setForeground(new java.awt.Color(0, 204, 0));
                    cropVal[2] = 4;
                    break;
            }
            maturity[2] = 0;
            ripe[2] = crop3.getRipeness();
            displayAll();
            btnR3A=false;
            btnR3.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnR3ActionPerformed

    private void btnR4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnR4ActionPerformed
        
        if (btnR4A==true){
            while (true) {
                try {
                //Input window
                input = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Please enter a crop to replant in this position.\n"
                        + "0 - Corn\n"
                        + "1 - Tomatoes\n"
                        + "2 - Potatoes\n"
                        + "3 - Carrots\n"
                        + "4 - Peas",
                        "REPLANT",
                        JOptionPane.INFORMATION_MESSAGE));
                if (input>-1&&input<5){
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
            }
            switch (input) {
                case 0:
                    crop4 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
                    lblCrop4.setText("Corn");
                    lblCrop4.setForeground(new java.awt.Color(255, 255, 0));
                    cropVal[3] = 0;
                    break;
                case 1:
                    crop4 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
                    lblCrop4.setText("Tomatoes");
                    lblCrop4.setForeground(new java.awt.Color(255, 0, 0));
                    cropVal[3] = 1;
                    break;
                case 2:
                    crop4 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
                    lblCrop4.setText("Potatoes");
                    lblCrop4.setForeground(new java.awt.Color(153, 102, 0));
                    cropVal[3] = 2;
                    break;
                case 3:
                    crop4 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
                    lblCrop4.setText("Carrots");
                    lblCrop4.setForeground(new java.awt.Color(255, 153, 0));
                    cropVal[3] = 3;
                    break;
                case 4:
                    crop4 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
                    lblCrop4.setText("Peas");
                    lblCrop4.setForeground(new java.awt.Color(0, 204, 0));
                    cropVal[3] = 4;
                    break;
            }
            maturity[3] = 0;
            ripe[3] = crop4.getRipeness();
            displayAll();
            btnR4A=false;
            btnR4.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnR4ActionPerformed

    private void btnR5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnR5ActionPerformed
        
        if (btnR5A==true){
            while (true) {
                try {
                //Input window
                input = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Please enter a crop to replant in this position.\n"
                        + "0 - Corn\n"
                        + "1 - Tomatoes\n"
                        + "2 - Potatoes\n"
                        + "3 - Carrots\n"
                        + "4 - Peas",
                        "REPLANT",
                        JOptionPane.INFORMATION_MESSAGE));
                if (input>-1&&input<5){
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
                } catch (NumberFormatException | NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                }
            }
            switch (input) {
                case 0:
                    crop5 = new Crop(ripePoint[0], hydration[0], yMin[0], yMax[0]);
                    lblCrop5.setText("Corn");
                    lblCrop5.setForeground(new java.awt.Color(255, 255, 0));
                    cropVal[4] = 0;
                    break;
                case 1:
                    crop5 = new Crop(ripePoint[1], hydration[1], yMin[1], yMax[1]);
                    lblCrop5.setText("Tomatoes");
                    lblCrop5.setForeground(new java.awt.Color(255, 0, 0));
                    cropVal[4] = 1;
                    break;
                case 2:
                    crop5 = new Crop(ripePoint[2], hydration[2], yMin[2], yMax[2]);
                    lblCrop5.setText("Potatoes");
                    lblCrop5.setForeground(new java.awt.Color(153, 102, 0));
                    cropVal[4] = 2;
                    break;
                case 3:
                    crop5 = new Crop(ripePoint[3], hydration[3], yMin[3], yMax[3]);
                    lblCrop5.setText("Carrots");
                    lblCrop5.setForeground(new java.awt.Color(255, 153, 0));
                    cropVal[4] = 3;
                    break;
                case 4:
                    crop5 = new Crop(ripePoint[4], hydration[4], yMin[4], yMax[4]);
                    lblCrop5.setText("Peas");
                    lblCrop5.setForeground(new java.awt.Color(0, 204, 0));
                    cropVal[4] = 4;
                    break;
            }
            maturity[4] = 0;
            ripe[4] = crop5.getRipeness();
            displayAll();
            btnR5A=false;
            btnR5.setForeground(new java.awt.Color(204, 204, 204));
        }
        
    }//GEN-LAST:event_btnR5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFarmSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFarmSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFarmSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFarmSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFarmSim().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnH1;
    private javax.swing.JButton btnH2;
    private javax.swing.JButton btnH3;
    private javax.swing.JButton btnH4;
    private javax.swing.JButton btnH5;
    private javax.swing.JButton btnR1;
    private javax.swing.JButton btnR2;
    private javax.swing.JButton btnR3;
    private javax.swing.JButton btnR4;
    private javax.swing.JButton btnR5;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnW1;
    private javax.swing.JButton btnW2;
    private javax.swing.JButton btnW3;
    private javax.swing.JButton btnW4;
    private javax.swing.JButton btnW5;
    private javax.swing.JLabel lblC1;
    private javax.swing.JLabel lblC2;
    private javax.swing.JLabel lblC3;
    private javax.swing.JLabel lblC4;
    private javax.swing.JLabel lblC5;
    private javax.swing.JLabel lblCrop1;
    private javax.swing.JLabel lblCrop2;
    private javax.swing.JLabel lblCrop3;
    private javax.swing.JLabel lblCrop4;
    private javax.swing.JLabel lblCrop5;
    private javax.swing.JLabel lblDays;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblM1;
    private javax.swing.JLabel lblM2;
    private javax.swing.JLabel lblM3;
    private javax.swing.JLabel lblM4;
    private javax.swing.JLabel lblM5;
    private javax.swing.JLabel lblQuota;
    private javax.swing.JLabel lblR1;
    private javax.swing.JLabel lblR2;
    private javax.swing.JLabel lblR3;
    private javax.swing.JLabel lblR4;
    private javax.swing.JLabel lblR5;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblW1;
    private javax.swing.JLabel lblW2;
    private javax.swing.JLabel lblW3;
    private javax.swing.JLabel lblW4;
    private javax.swing.JLabel lblW5;
    private javax.swing.JLabel lblWeather;
    // End of variables declaration//GEN-END:variables
}
